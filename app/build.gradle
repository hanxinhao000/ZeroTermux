plugins {
  id "com.android.application"

}
apply plugin: 'kotlin-android'


android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion project.properties.ndkVersion

    buildFeatures {
        viewBinding true
    }
    lintOptions {

        checkReleaseBuilds false

    }
    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.jvmArgs += ["-Duser.language=en"]
    }
    signingConfigs {
        release {
            keyAlias 'phone1'
            keyPassword '654321'
            storeFile file('D:/Utermux/termux-app-master/签名文件/phone.jks')
            storePassword '123456'
        }
        debug {
            keyAlias 'phone1'
            keyPassword '654321'
            storeFile file('D:/Utermux/termux-app-master/签名文件/phone.jks')
            storePassword '123456'
        }
    }

  /*  sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }*/


    dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'libs')
        implementation "androidx.annotation:annotation:1.2.0"
        implementation "androidx.core:core:1.5.0-rc01"
        implementation "androidx.drawerlayout:drawerlayout:1.1.1"
        implementation "androidx.preference:preference:1.1.1"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "com.google.guava:guava:31.0.1-jre"
        implementation 'com.google.code.gson:gson:2.8.6'
        //网络框架
        implementation 'com.lzy.net:okgo:3.0.4'
        //switch Btn
        implementation 'com.github.iielse:switchbutton:1.0.4'

        implementation 'com.github.getActivity:XXPermissions:11.5'
        implementation 'com.daimajia.numberprogressbar:library:1.4@aar'

        implementation 'me.laoyuyu.aria:core:3.8.16'
        annotationProcessor 'me.laoyuyu.aria:compiler:3.8.16'


        debugImplementation 'com.github.getActivity:Logcat:9.6'

        implementation 'com.scottyab:rootbeer-lib:0.1.0'

        //OTG0
        implementation 'me.jahnen:libaums:0.8.0'
        implementation 'me.jahnen:libaums-httpserver:0.5.3'
        implementation 'me.jahnen:libaums-storageprovider:0.5.1'

        //webview框架
        implementation 'com.just.agentweb:agentweb:4.0.2'
        implementation 'com.just.agentweb:download:4.0.2'

        //颜色取色器
        implementation 'com.github.rtugeek:colorseekbar:2.0.3'

        //选取图片
        implementation 'com.zzti.fengyongge:imagepicker:1.4.5'

        //glide
        implementation 'com.github.bumptech.glide:glide:4.8.0'
        annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

        implementation 'com.mallotec.reb:plugin-locale:1.0.12'
        implementation "io.noties.markwon:core:$markwonVersion"
        implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
        implementation "io.noties.markwon:linkify:$markwonVersion"
        implementation "io.noties.markwon:recycler:$markwonVersion"


        implementation project(":terminal-view")
        implementation project(":termux-shared")
    }

    defaultConfig {
        applicationId "com.termux"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 118
        versionName "0.118.19"

        manifestPlaceholders.TERMUX_PACKAGE_NAME = "com.termux"
        manifestPlaceholders.TERMUX_APP_NAME = "Termux"
        manifestPlaceholders.TERMUX_API_APP_NAME = "Termux:API"
        manifestPlaceholders.TERMUX_BOOT_APP_NAME = "Termux:Boot"
        manifestPlaceholders.TERMUX_FLOAT_APP_NAME = "Termux:Float"
        manifestPlaceholders.TERMUX_STYLING_APP_NAME = "Termux:Styling"
        manifestPlaceholders.TERMUX_TASKER_APP_NAME = "Termux:Tasker"
        manifestPlaceholders.TERMUX_WIDGET_APP_NAME = "Termux:Widget"

        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }



        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }


        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }

    }



    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }

    lintOptions {
        disable 'ProtectedPermissions'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

}

dependencies {
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation project(path: ':xh_lib')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.robolectric:robolectric:4.4"
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task versionName {
  doLast {
    print android.defaultConfig.versionName
  }
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    def remoteUrl = "https://github.com/termux/termux-packages/releases/download/bootstrap-" + version + "/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

task downloadBootstraps() {
    doLast {
        def version = "2022.01.07-r1"
        downloadBootstrap("aarch64", "fe6d0159d12fcb8baf7750ce9072b9b36f742662b02ad4da145ab85873614cd", version)
        downloadBootstrap("arm",     "a6014e2ec3b7079524fee3caabd02be05bcb4add3c6cd9e5ad98408b428c717", version)
        downloadBootstrap("i686",    "c55369a9af1316dc3d99457aa23cce64b29c1e60e375159352c0d4b9cfed4ac6", version)
        downloadBootstrap("x86_64",  "e93a7c66d15edb7d1b5ceca906255c85ead35a8b6a52f93524e117cfb07e6778", version)
    }
}


afterEvaluate {
  android.applicationVariants.all { variant ->
    variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
  }
}
repositories {
    mavenCentral()
}
